name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*'       # pokreće se samo kad pushuješ tag v1.0.0, v2.0.0 itd.
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'github'
        type: choice
        options:
        - github
        - nuget.org

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "PACKAGE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "PACKAGE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          fi

      - name: Create output directory
        run: mkdir -p ./nupkgs

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release

      - name: Pack all projects
        run: |
          for proj in $(find . -name 'Jezda.Common*.csproj'); do
            echo "Packing project: $proj"
            dotnet pack "$proj" --configuration Release -p:PackageVersion=${PACKAGE_VERSION} --output ./nupkgs
          done

      - name: List generated packages
        run: ls -la ./nupkgs/

      - name: Add GitHub NuGet source
        run: dotnet nuget add source --username jezda-solutions --password ${{ secrets.CLASSIC_PAT }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/jezda-solutions/index.json"

      - name: Push packages to GitHub Packages
        run: |
          for pkg in ./nupkgs/*.nupkg; do
            echo "Pushing package: $pkg"
            dotnet nuget push "$pkg" --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --skip-duplicate
          done